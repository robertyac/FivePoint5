CREATE DATABASE social;
USE social;

DROP TABLE IF EXISTS PostTags;
DROP TABLE IF EXISTS Tag;
DROP TABLE IF EXISTS Comment;
DROP TABLE IF EXISTS Post;
DROP TABLE IF EXISTS User;

CREATE TABLE User (
    UserID INT AUTO_INCREMENT,
    Username VARCHAR(255) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL UNIQUE,
    ProfilePicture BLOB,
    IsAdmin BOOLEAN DEFAULT FALSE,
    TimeCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(UserID)
);

CREATE TABLE Post (
    PostID INT AUTO_INCREMENT,
    PostTitle VARCHAR(255) NOT NULL,
    PostImage BLOB,
    Description VARCHAR(255) NOT NULL,
    PostDateTime DATETIME DEFAULT CURRENT_TIMESTAMP,
    Rating DECIMAL(2,1) CHECK (Rating <= 5.5),
    UserID INT,
    PRIMARY KEY(PostID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Comment (
    CommentID INT AUTO_INCREMENT,
    PostID INT,
    UserID INT,
    Content TEXT NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(CommentID),
    FOREIGN KEY (PostID) REFERENCES Posts(PostID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Tag (
    TagID INT AUTO_INCREMENT,
    Name VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(TagID)
);

CREATE TABLE PostTags (
    PostID INT,
    TagID INT,
    PRIMARY KEY(PostID, TagID),
    FOREIGN KEY (PostID) REFERENCES Posts(PostID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (TagID) REFERENCES Tags(TagID) ON DELETE CASCADE ON UPDATE CASCADE
);

--Admin Users
INSERT INTO User (Username, Password, Email, IsAdmin) VALUES ('robert', 'admin@03', 'robertyacovelli@gmail.com',TRUE);
INSERT INTO User (Username, Password, Email, IsAdmin) VALUES ('davis', 'admin@03', 'Davis_franklin@outlook.com',TRUE);
INSERT INTO User (Username, Password, Email, IsAdmin) VALUES ('connor', 'admin@03', 'connor.cahoon@gmail.com',TRUE);

