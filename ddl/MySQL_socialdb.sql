CREATE DATABASE social;
USE social;

DROP TABLE IF EXISTS PostTags;
DROP TABLE IF EXISTS Tag;
DROP TABLE IF EXISTS Comment;
DROP TABLE IF EXISTS Post;
DROP TABLE IF EXISTS User;

CREATE TABLE User (
    UserID INT AUTO_INCREMENT,
    Username VARCHAR(255) NOT NULL UNIQUE,
    PasswordHash CHAR(64) NOT NULL,
    Email VARCHAR(255) NOT NULL UNIQUE,
    ProfilePicture LONGBLOB,
    IsAdmin BOOLEAN DEFAULT FALSE,
    TimeCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(UserID)
);

CREATE TABLE Post (
    PostID INT AUTO_INCREMENT,
    PostTitle VARCHAR(255) NOT NULL,
    PostImage LONGBLOB,
    Description VARCHAR(255) NOT NULL,
    PostDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UserID INT,
    PRIMARY KEY(PostID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Comment (
    CommentID INT AUTO_INCREMENT,
    PostID INT,
    UserID INT,
    Content TEXT NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(CommentID),
    FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Tag (
    TagID INT AUTO_INCREMENT,
    Name VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(TagID)
);

CREATE TABLE PostTags (
    PostID INT,
    TagID INT,
    PRIMARY KEY(PostID, TagID),
    FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (TagID) REFERENCES Tag(TagID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- New tables for more functionality

CREATE TABLE UserFavoritePosts (
    UserID INT,
    PostID INT,
    PRIMARY KEY(UserID, PostID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE UserFavoriteTags (
    UserID INT,
    TagID INT,
    PRIMARY KEY(UserID, TagID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (TagID) REFERENCES Tag(TagID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE UserFollowsUser (
    FollowerID INT,
    FollowedID INT,
    PRIMARY KEY(FollowerID, FollowedID),
    FOREIGN KEY (FollowerID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FollowedID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PostViews (
    PostID INT,
    ViewCount INT DEFAULT 0,
    PRIMARY KEY(PostID),
    FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE UserRatings (
    UserID INT,
    PostID INT,
    Rating DECIMAL(2, 1) CHECK (Rating <= 5.5),
    PRIMARY KEY(UserID, PostID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Admin
INSERT INTO User (Username, PasswordHash, Email, IsAdmin)
VALUES ('robert', SHA2('admin@03', 256), 'admin@5POINT5.com', TRUE);
INSERT INTO User (Username, PasswordHash, Email, IsAdmin)
VALUES ('davis', SHA2('admin@03', 256), 'admin1@5POINT5.com', TRUE);
INSERT INTO User (Username, PasswordHash, Email, IsAdmin)
VALUES ('connor', SHA2('admin@03', 256), 'admin2@5POINT5.com', TRUE);